### üìÑ Script de gera√ß√£o do arquivo atividades.json

#### üß© **Descri√ß√£o da Funcionalidade**

Gere um arquivo `client/src/data/atividades.json` contendo a base de dados de atividades dispon√≠veis no Firebase Storage. Dentro da pasta `atividades`, cada subpasta representa uma categoria e cont√©m arquivos `.jpg` que representam atividades educativas. O script deve percorrer todas as subpastas, identificar os arquivos de imagem e gerar, para cada um, um objeto JSON contendo informa√ß√µes da atividade. O objetivo √© consolidar todos esses dados em um √∫nico arquivo JSON estruturado.

#### ‚úÖ **Requisitos Funcionais**

- **Conectar ao Firebase Storage**
    - Utilizar o Firebase Admin SDK.
    - Permitir a leitura de arquivos dentro da pasta `atividades/`.
    - Solicitar credenciais do tipo `serviceAccountKey.json` no momento da execu√ß√£o, se ainda n√£o fornecidas.
- **Percorrer Estrutura de Pastas**
    - Acessar a pasta principal `atividades/` no Storage.
    - Identificar todas as subpastas (cada uma representa uma categoria).
    - O nome da subpasta √© o ID da categoria
- **Identificar Arquivos de Imagem**
    - Para cada subpasta, listar todos os arquivos com extens√£o `.jpg`.
    - Ignorar outros formatos (como `.pdf`, `.png`, etc.).
- **Gerar Objetos de Atividade**
    - Para cada arquivo `.jpg`, gerar um objeto JSON contendo:
    ```json
    {
		"id": "UUID v4",
		"ordem": 1, // Mesmo nome do arquivo sem a extens√£o
		"data": "2025-12-23T22:30:00", // ISO date
		"categoria": "pre-escrita-tracado", // mesmo nome da pasta
		"pasta": "atividades/pre-escrita-tracado",
		"arquivo": "1.jpg",
		"imagemUrl": "https://storage..." // Gerar via API uma URL p√∫blica
	}
	```
- **Consolidar no Arquivo `client/src/data/atividades.json`**
    - Todos os objetos devem ser salvos em um array JSON.
    - O arquivo `atividades.json` ser√° salvo localmente no diret√≥rio do script.
- **Exibir Resumo no Console**
    - Imprimir no terminal a quantidade total de categorias e atividades processadas.
    - Indicar o local onde o `atividades.json` foi salvo.
#### üìÅ **Pastas e Arquivos Permitidos**

```
client/src/data/atividades.json (arquivo criado ou alterado)
extras/gerar-atividades.js (script principal)
```


#### üîí **Restri√ß√µes de Seguran√ßa e Boas Pr√°ticas**

- N√£o modifique arquivos fora dos listados acima.
- N√£o crie nem modifique tabelas de banco de dados sem solicita√ß√£o expl√≠cita.
- N√£o apague ou sobrescreva dados sem instru√ß√£o clara.
- Toda vari√°vel sens√≠vel (como chaves de API, tokens ou URLs protegidas) deve ser armazenada em arquivos `.env` ou equivalente.
- Sempre perguntar antes de instalar bibliotecas externas ou adicionar depend√™ncias.
- Todas as opera√ß√µes que envolvam escrita ou leitura em banco de dados devem ser explicitamente solicitadas no prompt principal.
- Evitar comandos destrutivos ou irrevers√≠veis, como `DELETE`, exceto sob instru√ß√£o expl√≠cita.
- Assegure-se de n√£o expor dados sens√≠veis no frontend.

#### üìå **Orienta√ß√µes de Desenvolvimento Padr√£o**

- Usar nomes claros e sem√¢nticos para vari√°veis e fun√ß√µes.
- Dividir responsabilidades entre componentes (ex: l√≥gica de autentica√ß√£o separada da UI).
- Comentar trechos de l√≥gica complexa.
- Priorizar c√≥digo limpo, reutiliz√°vel e organizado.
- Validar entradas do usu√°rio sempre que aplic√°vel.
- Preferir fun√ß√µes puras e evitar efeitos colaterais n√£o controlados.
- Priorizar acessibilidade e compatibilidade responsiva na interface.